"""
This file contains the expected shapes of the data generated by the
data generator for different models and configurations.
"""


def get_expected_shapes(
    _model_config, n_parameter_sets, n_training_samples_by_parameter_set
):
    n_model_parameters = _model_config["n_params"]
    n_choice_options = _model_config["nchoices"]
    lan_data_samples = (
        n_parameter_sets * n_training_samples_by_parameter_set - 2 * n_parameter_sets
    )
    cpn_labels_b = n_choice_options if n_choice_options > 2 else n_choice_options - 1
    cpn_labels = (
        (n_parameter_sets,) if cpn_labels_b == 1 else (n_parameter_sets, cpn_labels_b)
    )

    return {
        "binned_128": (n_parameter_sets, 128, n_choice_options),
        "binned_256": (n_parameter_sets, 256, n_choice_options),
        "cpn_data": (n_parameter_sets, n_model_parameters),
        "cpn_labels": cpn_labels,
        "cpn_no_omission_data": (n_parameter_sets, n_model_parameters),
        "cpn_no_omission_labels": cpn_labels,
        "gonogo_data": (n_parameter_sets, n_model_parameters),
        "gonogo_labels": (n_parameter_sets, 1),
        "lan_data": (
            lan_data_samples,
            n_model_parameters + 2,
        ),  # because you need the extra choice / rt dims
        "lan_labels": (
            lan_data_samples,
        ),  # always this (possible we should make this (..., 1) but need to take care of downstream for that)
        "opn_data": (n_parameter_sets, n_model_parameters),
        "opn_labels": (n_parameter_sets, 1),
        "thetas": (n_parameter_sets, n_model_parameters),
    }
